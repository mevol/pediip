#!/usr/bin/env python3

import argparse
import datetime
import os
import sys
import modules.create_mr_set.utils.models as models
import modules.create_mr_set.utils.pdbtools as pdbtools
import modules.create_mr_set.utils.rcsb as rcsb
import modules.create_mr_set.tasks.choose_structures as choose_structures
import modules.create_mr_set.tasks.prepare_structure_data as prepare_structure_data
import modules.create_mr_set.tasks.get_sequences as get_sequences
import modules.create_mr_set.tasks.find_homologues as find_homologues
import modules.create_mr_set.tasks.run_mr as prepare_and_do_mr
import modules.create_mr_set.tasks.tasks as tasks
import modules.create_mr_set.utils.utils as utils
#from modules.create_mr_set.db.database import DB

## ARGUMENTS

def add_required_arguments(parser):
  required = parser.add_argument_group("Required arguments")
  required.add_argument("--pdb-coords", metavar="DIR", required=True, help="Directory containing divided coordinate files in gzipped PDB format (??/pdb????.ent.gz)")
  required.add_argument("--pdb-sfs", metavar="DIR", required=True, help="Directory containing divided reflection data files in gzipped CIF format (??/r????sf.ent.gz)")
  required.add_argument("--pdb-reports", metavar="DIR", required=True, help="Directory containing divided validation reports in gzipped XML format (??/????/????_validation.xml.gz)")
  required.add_argument("--gesamt-archive", metavar="DIR", required=True, help="Directory containing a GESAMT archive to search for structural homologues")

def add_optional_arguments(parser):
  optional = parser.add_argument_group("Optional arguments")
  optional.add_argument("--help", action="help", help="Show this help message and exit")
  optional.add_argument("--jobs", metavar="N", default="auto", help="Number of CPU threads to use (default: auto)")
  optional.add_argument("--model-model-max-seqid", type=int, metavar="[95,90,70,50,40,30]", choices=[95,90,70,50,40,30], default=70, help="Maximum sequence identity between two models (default: 70)")
  optional.add_argument("--model-model-min-rmsd", type=float, metavar="X", default=1.5, help="Minimum RMSD between two models (default: 1.5)")
  optional.add_argument("--model-target-max-rmsd", type=float, metavar="X", default=3.0, help="Maximum RMSD between model and target (default: 3.0)")
  optional.add_argument("--model-target-max-seqid", type=int, metavar="[95,90,70,50,40,30]", choices=[95,90,70,50,40,30], default=70, help="Maximum sequence identity between model and target (default: 70)")
  optional.add_argument("--model-target-min-qscore", type=float, metavar="X", default=0.2, help="Minimum GESAMT Q-score between model and target (default: 0.2)")
  optional.add_argument("--num-models", type=int, metavar="N", default=10, help="Maximum number of models to choose for each unique chain (default: 10)")
  optional.add_argument("--num-structures", type=int, metavar="N", default=200, help="Maximum number of structures to find in each resolution bin (default: 200)")
  optional.add_argument("--res-bins", type=int, metavar="N", default=10, help="Number of resolution bins (default: 10)")
  optional.add_argument("--res-max", type=float, metavar="X", default=2.5, help="Maximum resolution (exclusive) (default: 3.5)")
  optional.add_argument("--res-min", type=float, metavar="X", default=1.0, help="Minimum resolution (inclusive) (default: 1.0)")
  optional.add_argument("--stop-before-mr", action="store_true", help="Prepare the models but stop before performing MR")
  optional.add_argument("--structure-structure-max-seqid", type=int, metavar="[95,90,70,50,40,30]", choices=[95,90,70,50,40,30], default=50, help="Maximum sequence identity used for filtering structures with similar chains (default: 50)")
  optional.add_argument("--tolerance-completeness", type=float, metavar="X", default=90, help="Minimum allowed data completeness (default: 90)")
  optional.add_argument("--tolerance-rwork", type=float, metavar="X", default=0.05, help="Maximum allowed difference between reported and refined R-work (default: 0.05)")
  optional.add_argument("--validation-clash", type=int, metavar="N", default=40, help="Clashscore percentile threshold (default: 40)")
  optional.add_argument("--validation-rama", type=int, metavar="N", default=40, help="Percentage Ramachandran outliers percentile threshold (default: 40)")
  optional.add_argument("--validation-rfree", type=int, metavar="N", default=50, help="Rfree percentile threshold (default: 50)")
  optional.add_argument("--validation-rota", type=int, metavar="N", default=40, help="Percentage rotamer outliers percentile threshold (default: 40)")
  optional.add_argument("--validation-rsrz", type=int, metavar="N", default=40, help="Percentage RSRZ outliers percentile threshold (default: 40)")

def add_calculated_arguments(args):
  args.res_step = (args.res_max - args.res_min) / args.res_bins
  args.jobs = os.cpu_count() if args.jobs == "auto" else int(args.jobs)
  args.jobs = max(1, min(args.jobs, os.cpu_count()))

def parse_args():
  description = "Creates a new molecular replacement test set."
  parser = argparse.ArgumentParser(description=description, add_help=False)
  add_required_arguments(parser)
  add_optional_arguments(parser)
  args = parser.parse_args()
  for arg in sorted(vars(args)):
    user_arg = "--%s" % arg.replace("_", "-")
    print("%-31s  %s" % (user_arg, getattr(args, arg)))
  print("")
  add_calculated_arguments(args)
  return args

## MAIN

if __name__ == "__main__":
  print("###################")
  print("## Create MR Set ##")
  print("###################")
  print("")
  print("Please cite:")
  print("XXXX")
  print("")
  print("Time: %s\n" % datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

  if "CCP4" not in os.environ:
    sys.exit("Please setup the CCP4 environment")

  args = parse_args()

  print("Getting a list of PDB structures ...\n")
  rcsb_structures = rcsb.structures(args)
  if os.path.exists("structures"):
    existing = os.listdir("structures")
    if len(existing) > 0:
       structures = { sid: models.Structure(rcsb_structures[sid]) for sid in existing }
       structures = { s.id: s for s in structures.values() if "error" not in s.metadata }
       print("Working on %d existing structures without errors" % len(structures))
  else:
    structures = choose_structures.choose_structures(rcsb_structures, args)
    if len(structures) < 1: sys.exit("ERROR: No structures chosen")
    get_sequences.get_sequences(structures, args)
    prepare_structure_data.prepare_structure_data(structures, args)

  chains = {c.global_id: c for s in structures.values() for c in s.chains.values()}
  print("Chains found: ", chains)
  print("Chain keys: ", chains.keys())
  print("Chain values: ", chains.values())
  print("Number of chains to search for", len(chains))
  find_homologues.find_homologues(chains, args)
  
#
#  for c in chains.values():
#    print(6666666666666666, c)
#    for h in c.homologues.values():
#      print(7777777777777777, h)
#
#  if os.path.exists("homologues"):
#  homologues = {h.global_id: h for c in chains.values() for h in c.homologues.values() if h.todo}
#  if len(homologues) > 0:
#    prepare_and_do_mr.prepare_and_do_mr(homologues, args)
  homologues = {h.global_id: h for c in chains.values() for h in c.homologues.values()} #if h.todo}# ignoring the if statement to add the Buccaneer run
  print("Found homologues: ", homologues)
  print("Number of homologues found", len(homologues))
  if len(homologues) > 0:
    "Running MR and SSM"
    prepare_and_do_mr.prepare_and_do_mr(homologues, args)
    
# Taken database function out for now; plan is to have a separate set of scripts to do the job.
#  # Create the database
#  db = DB(overwrite=True)
#
#  # Check it exists
#  if not os.path.exists("results.sqlite"):
#    raise RuntimeError("Failed to initialise")
#  print("Database has been initialised")
#  redo_stats_in = os.path.join(args.pdb_coords, "alldata_noHeader.txt")
#  
#  for homologue in homologues:
#    db.add_mr_ssm_stats(homologue)
#    
#  #db.add_pdb_redo(redo_stats_in)



  print("------------------")
  print("Normal termination")
  print("------------------")
